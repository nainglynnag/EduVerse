<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EduVerse - Instructor Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              "blue-950": "#1e3a8a",
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Sidebar -->
    <div
      id="sidebar"
      class="fixed left-0 top-0 h-full w-64 bg-white shadow-xl z-40 transform transition-transform duration-300"
    >
      <!-- Logo -->
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center space-x-3">
          <div
            class="bg-gradient-to-r from-purple-600 to-pink-600 p-2 rounded-lg"
          >
            <svg
              class="w-8 h-8 text-white"
              fill="currentColor"
              viewBox="0 0 20 20"
            >
              <path
                d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z"
              />
            </svg>
          </div>
          <span
            class="text-xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent"
            >EduVerse</span
          >
        </div>
        <p class="text-sm text-gray-600 mt-1">Instructor Portal</p>
      </div>

      <!-- Navigation Menu -->
      <nav class="p-4">
        <ul class="space-y-2">
          <li>
            <a
              href="#dashboard"
              class="flex items-center space-x-3 px-4 py-3 rounded-lg bg-gradient-to-r from-purple-600 to-pink-600 text-white"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"
                />
              </svg>
              <span>Dashboard</span>
            </a>
          </li>
          <li>
            <a
              href="#courses"
              class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-purple-50 hover:text-purple-600 transition-all"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                  clip-rule="evenodd"
                />
              </svg>
              <span>My Courses</span>
            </a>
          </li>
          <li>
            <a
              href="#create"
              class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-purple-50 hover:text-purple-600 transition-all"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clip-rule="evenodd"
                />
              </svg>
              <span>Create Course</span>
            </a>
          </li>
          <li>
            <a
              href="#students"
              class="flex items-center space-x-3 px-4 py-3 rounded-lg text-gray-700 hover:bg-purple-50 hover:text-purple-600 transition-all"
            >
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                <path
                  d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"
                />
              </svg>
              <span>Students</span>
            </a>
          </li>
          
          
          
        </ul>
      </nav>

      <!-- User Profile Section -->
      <div
        class="absolute bottom-0 left-0 right-0 p-4 border-t border-gray-200"
      >
        <div
          class="flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer"
          onclick="openProfile()"
        >
          <div
            class="w-10 h-10 bg-gradient-to-r from-purple-600 to-pink-600 rounded-full flex items-center justify-center"
          >
            <span class="text-sm font-bold text-white">DR</span>
          </div>
          <div class="flex-1">
            <p class="text-sm font-medium text-gray-800"></p>
            <p class="text-xs text-gray-600">Instructor</p>
          </div>
          <svg
            class="w-4 h-4 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>
      </div>
    </div>

    <!-- Mobile Sidebar Overlay -->
    <div
      id="sidebarOverlay"
      class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden lg:hidden"
    ></div>

    <!-- Main Content -->
    <div class="lg:ml-64">
      <!-- Top Header -->
      <header
        class="bg-white/90 backdrop-blur-sm shadow-sm border-b border-gray-200 sticky top-0 z-20"
      >
        <div class="px-6 py-4">
          <div class="flex items-center justify-between">
            <!-- Mobile Menu Button -->
            <button
              id="mobileMenuBtn"
              class="lg:hidden p-2 rounded-lg hover:bg-gray-100"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16M4 18h16"
                />
              </svg>
            </button>

            <!-- Page Title -->
            <div class="flex-1 lg:flex-none">
              <h1 class="text-2xl font-bold text-gray-800">Dashboard</h1>
            </div>

            <!-- Header Actions -->
            <div class="flex items-center space-x-4">
              <!-- Search -->
              <div class="hidden md:block relative">
                <input
                  type="text"
                  placeholder="Search courses..."
                  class="w-64 pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <svg
                  class="w-5 h-5 text-gray-400 absolute left-3 top-2.5"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>

              <!-- Create Course Button -->
              <button
                onclick="showCreateCourse()"
                class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-4 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all flex items-center space-x-2"
              >
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path
                    fill-rule="evenodd"
                    d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                    clip-rule="evenodd"
                  />
                </svg>
                <span class="hidden sm:inline">New Course</span>
              </button>

              <!-- Notifications -->
              <button
                id="notificationBtn"
                class="relative p-2 text-gray-600 hover:text-purple-600 hover:bg-purple-50 rounded-lg transition-all"
              >
                <svg
                  class="w-6 h-6"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 17h5l-5 5v-5zM10.97 4.97a.235.235 0 0 0-.02.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.061L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-1.071-1.05z"
                  />
                </svg>
                <span
                  class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center"
                  >8</span
                >
              </button>
            </div>
          </div>
        </div>
      </header>

          <!-- Recent Activity & Quick Actions -->
          <div class="grid grid-cols-1 xl:grid-cols-2 gap-8">
            <!-- Recent Courses -->
            <div class="xl:col-span-2">
              <div class="bg-white rounded-2xl p-6 shadow-lg">
                <div class="flex items-center justify-between mb-6">
                  <h3 class="text-xl font-bold text-gray-800">
                    My Courses
                  </h3>
                  <button
                    onclick="showCourses()"
                    class="text-purple-600 hover:text-purple-700 font-medium text-sm"
                  >
                    View All
                  </button>
                </div>

                <div class="space-y-4" id="coursesList">
                  <!-- Course items will be populated by JavaScript -->
                </div>
              </div>
            </div>

            <!-- Quick Actions -->
            <div class="space-y-6">
              
            </div>
          </div>
        </div>

        <!-- Courses Management Content -->
        <div id="coursesContent" class="hidden">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-2xl font-bold text-gray-800">My Courses</h2>
            <button
              onclick="showCreateCourse()"
              class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all flex items-center space-x-2"
            >
              <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                <path
                  fill-rule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clip-rule="evenodd"
                />
              </svg>
              <span>Create New Course</span>
            </button>
          </div>

          <!-- Course Filters -->
          <div class="bg-white rounded-lg p-4 mb-6 shadow-sm">
            <div class="flex flex-wrap gap-4 items-center">
              <div class="flex space-x-2">
                <button
                  class="px-4 py-2 bg-purple-100 text-purple-600 rounded-lg font-medium text-sm"
                >
                  All Courses
                </button>
                <button
                  class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
                >
                  Published
                </button>
                <button
                  class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
                >
                  Draft
                </button>
                <button
                  class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
                >
                  Archived
                </button>
              </div>
              <div class="flex-1"></div>
              <div class="relative">
                <input
                  type="text"
                  placeholder="Search courses..."
                  class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <svg
                  class="w-4 h-4 text-gray-400 absolute left-3 top-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
            </div>
          </div>

          <!-- Courses Grid -->
          <div
            class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
            id="coursesGrid"
          >
            <!-- Course cards will be populated by JavaScript -->
          </div>
        </div>

        <!-- Create Course Content -->
        <div id="createCourseContent" class="hidden">
          <div class="max-w-4xl mx-auto">
            <div class="mb-6">
              <h2 class="text-2xl font-bold text-gray-800">
                Create New Course
              </h2>
              <p class="text-gray-600">
                Fill in the details to create your new course
              </p>
            </div>

            <form id="createCourseForm" class="space-y-8">
              <!-- Basic Information -->
              <div class="bg-white rounded-2xl p-6 shadow-lg">
                <h3 class="text-lg font-bold text-gray-800 mb-4">
                  Basic Information
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Course Title *</label
                    >
                    <input
                      type="text"
                      id="courseTitle"
                      required
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Enter course title"
                    />
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Category *</label
                    >
                    <select
                      id="courseCategory"
                      required
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                      <option value="">Select category</option>
                      <option value="programming">Programming</option>
                      <option value="design">Design</option>
                      <option value="business">Business</option>
                      <option value="marketing">Marketing</option>
                      <option value="data-science">Data Science</option>
                      <option value="other">Other</option>
                    </select>
                  </div>
                  <div class="md:col-span-2">
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Short Description *</label
                    >
                    <textarea
                      id="courseDescription"
                      required
                      rows="3"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="Brief description of your course"
                    ></textarea>
                  </div>
                </div>
              </div>

              <!-- Course Details -->
              <div class="bg-white rounded-2xl p-6 shadow-lg">
                <h3 class="text-lg font-bold text-gray-800 mb-4">
                  Course Details
                </h3>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Price ($) *</label
                    >
                    <input
                      type="number"
                      id="coursePrice"
                      required
                      min="0"
                      step="0.01"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="0.00"
                    />
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Duration (hours) *</label
                    >
                    <input
                      type="number"
                      id="courseDuration"
                      required
                      min="1"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="10"
                    />
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Difficulty Level *</label
                    >
                    <select
                      id="courseDifficulty"
                      required
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    >
                      <option value="">Select level</option>
                      <option value="beginner">Beginner</option>
                      <option value="intermediate">Intermediate</option>
                      <option value="advanced">Advanced</option>
                    </select>
                  </div>
                </div>
              </div>

              <!-- Course Content -->
              <div class="bg-white rounded-2xl p-6 shadow-lg">
                <h3 class="text-lg font-bold text-gray-800 mb-4">
                  Course Content
                </h3>
                <div class="space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Learning Objectives</label
                    >
                    <textarea
                      id="courseObjectives"
                      rows="4"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="What will students learn from this course?"
                    ></textarea>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2"
                      >Prerequisites</label
                    >
                    <textarea
                      id="coursePrerequisites"
                      rows="3"
                      class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                      placeholder="What should students know before taking this course?"
                    ></textarea>
                  </div>
                </div>
              </div>

              <!-- Course Lessons -->
              <div class="bg-white rounded-2xl p-6 shadow-lg">
                <div class="flex items-center justify-between mb-4">
                  <h3 class="text-lg font-bold text-gray-800">
                    Course Lessons
                  </h3>
                  <button
                    type="button"
                    onclick="addLesson()"
                    class="bg-purple-100 text-purple-600 px-4 py-2 rounded-lg hover:bg-purple-200 transition-colors flex items-center space-x-2"
                  >
                    <svg
                      class="w-4 h-4"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                        clip-rule="evenodd"
                      />
                    </svg>
                    <span>Add Lesson</span>
                  </button>
                </div>
                <div id="lessonsContainer" class="space-y-4">
                  <!-- Lessons will be added dynamically -->
                </div>
              </div>

              <!-- Form Actions -->
              <div class="flex justify-end space-x-4">
                <button
                  type="button"
                  onclick="showDashboard()"
                  class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  onclick="saveDraft()"
                  class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                >
                  Save as Draft
                </button>
                <button
                  type="submit"
                  class="px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all"
                >
                  Publish Course
                </button>
              </div>
            </form>
          </div>
        </div>

                 <!-- Edit Course Content -->
         <div id="editCourseContent" class="hidden">
           <div class="max-w-4xl mx-auto">
             <div class="mb-6">
               <h2 class="text-2xl font-bold text-gray-800">Edit Course</h2>
               <p class="text-gray-600">Update your course information</p>
             </div>

             <form id="editCourseForm" class="space-y-8">
               <!-- Basic Information -->
               <div class="bg-white rounded-2xl p-6 shadow-lg">
                 <h3 class="text-lg font-bold text-gray-800 mb-4">
                   Basic Information
                 </h3>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Course Title *</label
                     >
                     <input
                       type="text"
                       id="editCourseTitle"
                       required
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="Enter course title"
                     />
                   </div>
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Category *</label
                     >
                     <select
                       id="editCourseCategory"
                       required
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                     >
                       <option value="">Select category</option>
                       <option value="programming">Programming</option>
                       <option value="design">Design</option>
                       <option value="business">Business</option>
                       <option value="marketing">Marketing</option>
                       <option value="data-science">Data Science</option>
                       <option value="other">Other</option>
                     </select>
                   </div>
                   <div class="md:col-span-2">
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Short Description *</label
                     >
                     <textarea
                       id="editCourseDescription"
                       required
                       rows="3"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="Brief description of your course"
                     ></textarea>
                   </div>
                 </div>
               </div>

               <!-- Course Details -->
               <div class="bg-white rounded-2xl p-6 shadow-lg">
                 <h3 class="text-lg font-bold text-gray-800 mb-4">
                   Course Details
                 </h3>
                 <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Price ($) *</label
                     >
                     <input
                       type="number"
                       id="editCoursePrice"
                       required
                       min="0"
                       step="0.01"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="0.00"
                     />
                   </div>
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Duration (hours) *</label
                     >
                     <input
                       type="number"
                       id="editCourseDuration"
                       required
                       min="1"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="10"
                     />
                   </div>
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Difficulty Level *</label
                     >
                     <select
                       id="editCourseDifficulty"
                       required
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                     >
                       <option value="">Select level</option>
                       <option value="beginner">Beginner</option>
                       <option value="intermediate">Intermediate</option>
                       <option value="advanced">Advanced</option>
                     </select>
                   </div>
                 </div>
               </div>

               <!-- Course Content -->
               <div class="bg-white rounded-2xl p-6 shadow-lg">
                 <h3 class="text-lg font-bold text-gray-800 mb-4">
                   Course Content
                 </h3>
                 <div class="space-y-4">
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Learning Objectives</label
                     >
                     <textarea
                       id="editCourseObjectives"
                       rows="4"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="What will students learn from this course?"
                     ></textarea>
                   </div>
                   <div>
                     <label class="block text-sm font-medium text-gray-700 mb-2"
                       >Prerequisites</label
                     >
                     <textarea
                       id="editCoursePrerequisites"
                       rows="3"
                       class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                       placeholder="What should students know before taking this course?"
                     ></textarea>
                   </div>
                 </div>
               </div>

               <!-- Form Actions -->
               <div class="flex justify-end space-x-4">
                 <button
                   type="button"
                   onclick="showCourses()"
                   class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                 >
                   Cancel
                 </button>
                 <button
                   type="button"
                   onclick="saveDraft()"
                   class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                 >
                   Save as Draft
                 </button>
                 <button
                   type="submit"
                   class="px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all"
                 >
                   Update Course
                 </button>
               </div>
             </form>
           </div>
         </div>
      </main>
    </div>

    <!-- Course Detail Modal -->
    <div
      id="courseDetailModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4"
    >
      <div
        class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 id="modalCourseTitle" class="text-2xl font-bold text-gray-800">
              Course Title
            </h2>
            <button
              onclick="closeCourseDetail()"
              class="text-gray-500 hover:text-gray-700"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Course Info -->
            <div class="lg:col-span-2">
              <div class="space-y-6">
                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">Description</h3>
                  <p id="modalCourseDescription" class="text-gray-600"></p>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Learning Objectives
                  </h3>
                  <ul
                    id="modalCourseObjectives"
                    class="list-disc list-inside text-gray-600 space-y-1"
                  ></ul>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Course Lessons
                  </h3>
                  <div id="modalCourseLessons" class="space-y-2"></div>
                </div>
              </div>
            </div>

            <!-- Course Stats -->
            <div>
              <div class="bg-gray-50 rounded-lg p-4 mb-4">
                <h3 class="font-semibold text-gray-800 mb-4">
                  Course Statistics
                </h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Enrolled Students</span>
                    <span id="modalEnrolledStudents" class="font-medium"
                      >0</span
                    >
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Completion Rate</span>
                    <span id="modalCompletionRate" class="font-medium">0%</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Average Rating</span>
                    <span id="modalAverageRating" class="font-medium">0.0</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Total Revenue</span>
                    <span id="modalTotalRevenue" class="font-medium">$0</span>
                  </div>
                </div>
              </div>

              <div class="space-y-3">
                <button
                  onclick="editCourse()"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Edit Course
                </button>
                <button
                  onclick="duplicateCourse()"
                  class="w-full border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Duplicate Course
                </button>
                <button
                  onclick="deleteCourse()"
                  class="w-full bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
                >
                  Delete Course
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Profile Modal -->
    <div
      id="profileModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4"
    >
      <div class="bg-white rounded-2xl max-w-md w-full">
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800">Profile Menu</h2>
            <button
              onclick="closeProfile()"
              class="text-gray-500 hover:text-gray-700"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <!-- Profile Info -->
          <div class="text-center mb-6">
            <div
              class="w-20 h-20 bg-gradient-to-r from-purple-600 to-pink-600 rounded-full flex items-center justify-center mx-auto mb-4"
            >
              <span class="text-2xl font-bold text-white">DR</span>
            </div>
            <h3 class="text-xl font-bold text-gray-800"><%= instructor.name || 'Instructor' %></h3>
            <p class="text-gray-600"><%= instructor.specialization || 'Instructor' %></p>
            

          <div class="space-y-2">
            <a
              href="/instructor/profile/edit"
              class="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-3"
            >
              <svg
                class="w-5 h-5 text-gray-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                />
              </svg>
              <span>Edit Profile</span>
            </a>

            <button
              class="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-3"
            >
              <svg
                class="w-5 h-5 text-gray-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
                />
              </svg>
              <span>Settings</span>
            </button>

            <button
              class="w-full text-left px-4 py-3 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-3"
            >
              <svg
                class="w-5 h-5 text-gray-600"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
              <span>Help & Support</span>
            </button>

            <hr class="my-2" />

            <button
              onclick="signOut()"
              class="w-full text-left px-4 py-3 rounded-lg hover:bg-red-50 transition-colors flex items-center space-x-3 text-red-600"
            >
              <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"
                />
              </svg>
              <span>Sign Out</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Course data from database
      let courses = [];

      let lessonCounter = 0;

      // Mobile menu toggle
      const mobileMenuBtn = document.getElementById("mobileMenuBtn");
      const sidebar = document.getElementById("sidebar");
      const sidebarOverlay = document.getElementById("sidebarOverlay");

      mobileMenuBtn.addEventListener("click", function () {
        sidebar.classList.toggle("-translate-x-full");
        sidebarOverlay.classList.toggle("hidden");
      });

      sidebarOverlay.addEventListener("click", function () {
        sidebar.classList.add("-translate-x-full");
        sidebarOverlay.classList.add("hidden");
      });

      // Navigation functions
      function showDashboard() {
        hideAllContent();
        document.getElementById("dashboardContent").classList.remove("hidden");
        updateActiveNav("dashboard");
        document.querySelector("header h1").textContent = "Dashboard";
        populateRecentCourses();
        updateDashboardStats(); // Refresh stats when dashboard is shown
      }

      function showCourses() {
        hideAllContent();
        document.getElementById("coursesContent").classList.remove("hidden");
        updateActiveNav("courses");
        document.querySelector("header h1").textContent = "My Courses";
        populateCoursesGrid();
        updateDashboardStats(); // Refresh stats when courses page is shown
      }

      function showCreateCourse() {
        hideAllContent();
        document
          .getElementById("createCourseContent")
          .classList.remove("hidden");
        updateActiveNav("create");
        document.querySelector("header h1").textContent = "Create Course";
        resetCreateForm();
      }

      function hideAllContent() {
        document.getElementById("dashboardContent").classList.add("hidden");
        document.getElementById("coursesContent").classList.add("hidden");
        document.getElementById("createCourseContent").classList.add("hidden");
        document.getElementById("editCourseContent").classList.add("hidden");
      }

      function updateActiveNav(activeId) {
        document.querySelectorAll("#sidebar nav a").forEach((link) => {
          link.classList.remove(
            "bg-gradient-to-r",
            "from-purple-600",
            "to-pink-600",
            "text-white"
          );
          link.classList.add(
            "text-gray-700",
            "hover:bg-purple-50",
            "hover:text-purple-600"
          );
        });

        const activeLink = document.querySelector(
          `#sidebar nav a[href="#${activeId}"]`
        );
        if (activeLink) {
          activeLink.classList.add(
            "bg-gradient-to-r",
            "from-purple-600",
            "to-pink-600",
            "text-white"
          );
          activeLink.classList.remove(
            "text-gray-700",
            "hover:bg-purple-50",
            "hover:text-purple-600"
          );
        }
      }

      // Sidebar navigation
      document.querySelectorAll("#sidebar nav a").forEach((link) => {
        link.addEventListener("click", function (e) {
          e.preventDefault();
          const href = this.getAttribute("href").substring(1);

          switch (href) {
            case "dashboard":
              showDashboard();
              break;
            case "courses":
              showCourses();
              break;
            case "create":
              showCreateCourse();
              break;
            default:
              alert(
                `${this.querySelector("span").textContent} section coming soon!`
              );
          }

          // Close mobile menu
          if (window.innerWidth < 1024) {
            sidebar.classList.add("-translate-x-full");
            sidebarOverlay.classList.add("hidden");
          }
        });
      });

             // Populate recent courses
       async function populateRecentCourses() {
         const coursesList = document.getElementById("coursesList");
         
         try {
           // Fetch courses from API - use current instructor's ID
           const currentInstructorId = parseInt('<%= instructor.id || 2 %>');
           const response = await fetch('/api/courses/instructor/' + currentInstructorId);
           const result = await response.json();
           
           if (result.success && result.data.length > 0) {
             const recentCourses = result.data.slice(0, 3);
             
             coursesList.innerHTML = recentCourses
               .map(
                 (course) => `
                     <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow cursor-pointer" onclick="openCourseDetail(${
                       course.id
                     })">
                         <div class="flex items-center space-x-4">
                             <div class="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                                 <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 20 20">
                                     <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                                 </svg>
                             </div>
                             <div>
                                 <h4 class="font-semibold text-gray-800">${
                                   course.title
                                 }</h4>
                                 <p class="text-sm text-gray-600">${course.enrollment_count || 0} students • ${course.status}</p>
                             </div>
                         </div>
                         <div class="text-right">
                             <p class="font-semibold text-gray-800">$${course.price || 0}</p>
                             <p class="text-sm text-gray-600">0.0/5 ⭐</p>
                         </div>
                     </div>
                 `
               )
               .join("");
           } else {
             // Show empty state
             coursesList.innerHTML = `
               <div class="text-center py-8">
                 <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                   <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                 </svg>
                 <h3 class="text-lg font-semibold text-gray-800 mb-2">No Courses Yet</h3>
                 <p class="text-gray-600 mb-4">You haven't created any courses yet.</p>
                 <button onclick="showCreateCourse()" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all">
                   Create Your First Course
                 </button>
               </div>
             `;
           }
         } catch (error) {
           console.error('Error fetching recent courses:', error);
           coursesList.innerHTML = `
             <div class="text-center py-8">
               <p class="text-gray-600">Error loading courses. Please try again.</p>
             </div>
           `;
         }
       }

             // Populate courses grid
       async function populateCoursesGrid() {
         const coursesGrid = document.getElementById("coursesGrid");
         
         try {
           // Show loading state
           coursesGrid.innerHTML = `
             <div class="col-span-full text-center py-12">
               <div class="bg-white rounded-2xl p-8 shadow-lg">
                 <svg class="w-8 h-8 text-gray-400 mx-auto mb-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                 </svg>
                 <p class="text-gray-600">Loading courses...</p>
               </div>
             </div>
           `;

           // Fetch courses from API
           const response = await fetch('/api/courses/instructor/4'); // Default instructor ID
           const result = await response.json();

           if (result.success && result.data.length > 0) {
                          coursesGrid.innerHTML = result.data
          .map(
            (course) => `
                <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow overflow-hidden">
                    <div class="bg-gradient-to-r from-purple-500 to-pink-500 h-32 flex items-center justify-center relative">
                        <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                        </svg>
                        <div class="absolute top-2 right-2">
                            <span class="px-2 py-1 text-xs rounded-full ${
                              course.status === "published"
                                ? "bg-green-100 text-green-800"
                                : "bg-yellow-100 text-yellow-800"
                            }">${course.status}</span>
                        </div>
                    </div>
                    <div class="p-6">
                        <div class="flex items-center justify-between mb-2">
                            <h3 class="font-bold text-gray-800">${
                              course.title
                            }</h3>
                        </div>
                        <p class="text-gray-600 text-sm mb-4">${
                               course.description || 'No description available'
                        }</p>
                        <div class="space-y-2 mb-4">
                            <div class="flex items-center justify-between text-sm text-gray-600">
                                <span class="font-medium">${course.category_display_name || course.category_name || 'Uncategorized'}</span>
                                <span class="font-bold">$${course.price || 0}</span>
                            </div>
                            <div class="flex items-center justify-between text-sm text-gray-600">
                                <span>${course.difficulty_name || 'Unknown'}</span>
                                <span>${course.enrollment_count || 0} students</span>
                            </div>
                        </div>
                        <div class="flex space-x-2">
                            <button onclick="openCourseDetail(${
                              course.id
                            })" class="flex-1 bg-purple-100 text-purple-600 px-4 py-2 rounded-lg hover:bg-purple-200 transition-colors text-sm">
                                View Details
                            </button>
                            <button onclick="editCourse(${
                              course.id
                            })" class="flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                                Edit
                            </button>
                        </div>
                    </div>
                </div>
            `
          )
          .join("");
           } else {
             // Show empty state
             coursesGrid.innerHTML = `
               <div class="col-span-full text-center py-12">
                 <div class="bg-white rounded-2xl p-8 shadow-lg">
                   <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                     <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                   </svg>
                   <h3 class="text-lg font-semibold text-gray-800 mb-2">No Courses Yet</h3>
                   <p class="text-gray-600 mb-4">You haven't created any courses yet. Start by creating your first course!</p>
                   <button onclick="showCreateCourse()" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all">
                     Create Your First Course
                   </button>
                 </div>
               </div>
             `;
           }
         } catch (error) {
           console.error('Error fetching courses:', error);
           coursesGrid.innerHTML = `
             <div class="col-span-full text-center py-12">
               <div class="bg-white rounded-2xl p-8 shadow-lg">
                 <svg class="w-16 h-16 text-red-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                   <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                 </svg>
                 <h3 class="text-lg font-semibold text-gray-800 mb-2">Error Loading Courses</h3>
                 <p class="text-gray-600 mb-4">There was an error loading your courses. Please try again.</p>
                 <button onclick="populateCoursesGrid()" class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-all">
                   Try Again
                 </button>
               </div>
             </div>
           `;
         }
       }

      // Course detail modal functions
      async function openCourseDetail(courseId) {
        try {
          const response = await fetch(`/api/courses/${courseId}`);
          const result = await response.json();
          
          if (result.success) {
            const course = result.data;
            
            document.getElementById("modalCourseTitle").textContent = course.title;
            document.getElementById("modalCourseDescription").textContent =
              course.description || 'No description available';
            document.getElementById("modalEnrolledStudents").textContent = course.enrollment_count || "0";
            document.getElementById("modalCompletionRate").textContent = "0%"; // Placeholder for future
            document.getElementById("modalAverageRating").textContent = course.instructor_rating || "0.0";
            document.getElementById("modalTotalRevenue").textContent = `$${((course.price || 0) * (course.enrollment_count || 0)).toFixed(2)}`;

            // Store course ID for deletion
            document.getElementById("courseDetailModal").setAttribute('data-course-id', course.id);

            // Populate objectives (placeholder for now)
            const objectivesList = document.getElementById("modalCourseObjectives");
            objectivesList.innerHTML = '<li>Learning objectives will be displayed here</li>';

            // Populate lessons (placeholder for now)
            const lessonsList = document.getElementById("modalCourseLessons");
            lessonsList.innerHTML = `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span class="text-sm font-medium">1. Course Introduction</span>
                    <span class="text-xs text-gray-600">15 min</span>
                </div>
            `;

            document.getElementById("courseDetailModal").classList.remove("hidden");
            document.body.style.overflow = "hidden";
          } else {
            alert("Error loading course details: " + result.message);
          }
        } catch (error) {
          console.error('Error loading course details:', error);
          alert("Error loading course details. Please try again.");
        }
      }

      function closeCourseDetail() {
        document.getElementById("courseDetailModal").classList.add("hidden");
        document.body.style.overflow = "auto";
      }

      // Course management functions
      function editCourse(courseId) {
        // Redirect to the edit page
        window.location.href = `/instructor/courses/${courseId}/edit`;
      }

      function duplicateCourse() {
        alert("Course duplicated successfully! You can now edit the copy.");
        closeCourseDetail();
      }

      async function deleteCourse() {
        const courseId = document.getElementById('courseDetailModal').getAttribute('data-course-id');
        
        if (!courseId) {
          alert("Error: Course ID not found");
          return;
        }

        if (
          confirm(
            "Are you sure you want to delete this course? This action cannot be undone."
          )
        ) {
          try {
            const response = await fetch(`/instructor/courses/${courseId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const result = await response.json();

                        if (result.success) {
          alert("Course deleted successfully.");
          closeCourseDetail();
          showCourses();
          updateDashboardStats(); // Refresh dashboard stats
            } else {
              alert("Error deleting course: " + result.message);
            }
          } catch (error) {
            console.error('Error:', error);
            alert("Error deleting course. Please try again.");
          }
        }
      }

      // Create course form functions
      function addLesson() {
        lessonCounter++;
        const lessonsContainer = document.getElementById("lessonsContainer");
        const lessonDiv = document.createElement("div");
        lessonDiv.className = "border border-gray-200 rounded-lg p-4";
        lessonDiv.innerHTML = `
                <div class="flex items-center justify-between mb-4">
                    <h4 class="font-medium text-gray-800">Lesson ${lessonCounter}</h4>
                    <button type="button" onclick="removeLesson(this)" class="text-red-600 hover:text-red-700">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </button>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Lesson Title</label>
                        <input type="text" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" placeholder="Enter lesson title">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Duration (minutes)</label>
                        <input type="number" min="1" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" placeholder="15">
                    </div>
                </div>
                <div class="mt-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Lesson Description</label>
                    <textarea rows="2" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent" placeholder="Brief description of this lesson"></textarea>
                </div>
            `;
        lessonsContainer.appendChild(lessonDiv);
      }

      function removeLesson(button) {
        button.closest(".border").remove();
      }

      function resetCreateForm() {
        document.getElementById("createCourseForm").reset();
        document.getElementById("lessonsContainer").innerHTML = "";
        lessonCounter = 0;
        addLesson(); // Add first lesson by default
      }

      function saveDraft() {
        alert("Course saved as draft! You can continue editing later.");
      }

      // Populate edit form with course data
      function populateEditForm(course) {
        document.getElementById('editCourseTitle').value = course.title || '';
        document.getElementById('editCourseDescription').value = course.description || '';
        document.getElementById('editCoursePrice').value = course.price || 0;
        document.getElementById('editCourseDuration').value = course.duration || 1;
        document.getElementById('editCourseObjectives').value = course.objectives || '';
        document.getElementById('editCoursePrerequisites').value = course.prerequisites || '';
        
        // Set category and difficulty using actual IDs from database
        document.getElementById('editCourseCategory').value = course.category_id || '';
        document.getElementById('editCourseDifficulty').value = course.difficulty_id || '';
        
        // Store course ID for update
        document.getElementById('editCourseForm').setAttribute('data-course-id', course.id);
      }

             // Form submission
       document
         .getElementById("createCourseForm")
         .addEventListener("submit", async function (e) {
           e.preventDefault();

                      // Get form data
          const courseData = {
            title: document.getElementById("courseTitle").value,
             instructor_id: 4, // Default instructor ID - you can make this dynamic
             category_id: parseInt(document.getElementById("courseCategory").value),
             difficulty_id: parseInt(document.getElementById("courseDifficulty").value),
             price: parseFloat(document.getElementById("coursePrice").value) || 0.00,
            description: document.getElementById("courseDescription").value,
             status: 'published'
           };

           try {
             // Show loading state
             const submitBtn = this.querySelector('button[type="submit"]');
             const originalText = submitBtn.textContent;
             submitBtn.textContent = "Creating...";
             submitBtn.disabled = true;

             // Send to API
             const response = await fetch('/api/courses', {
               method: 'POST',
               headers: {
                 'Content-Type': 'application/json',
               },
               body: JSON.stringify(courseData)
             });

             const result = await response.json();

                          if (result.success) {
          alert("Course published successfully! Students can now enroll.");
          showCourses();
          updateDashboardStats(); // Refresh dashboard stats
               this.reset();
               document.getElementById("lessonsContainer").innerHTML = "";
               lessonCounter = 0;
             } else {
               alert("Error creating course: " + result.message);
             }
           } catch (error) {
             console.error('Error:', error);
             alert("Error creating course. Please try again.");
           } finally {
             // Reset button state
             const submitBtn = this.querySelector('button[type="submit"]');
             submitBtn.textContent = originalText;
             submitBtn.disabled = false;
           }
         });



        // Edit form submission
        document
          .getElementById("editCourseForm")
          .addEventListener("submit", async function (e) {
            e.preventDefault();

            const courseId = this.getAttribute('data-course-id');
            if (!courseId) {
              alert("Error: Course ID not found");
              return;
            }

            // Get form data
            const courseData = {
              title: document.getElementById("editCourseTitle").value,
              category_id: parseInt(document.getElementById("editCourseCategory").value),
              difficulty_id: parseInt(document.getElementById("editCourseDifficulty").value),
              price: parseFloat(document.getElementById("editCoursePrice").value) || 0.00,
              description: document.getElementById("editCourseDescription").value,
              status: 'published'
            };

            try {
              // Show loading state
              const submitBtn = this.querySelector('button[type="submit"]');
              const originalText = submitBtn.textContent;
              submitBtn.textContent = "Updating...";
              submitBtn.disabled = true;

              // Send to API
              const response = await fetch(`/api/courses/${courseId}`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(courseData)
              });

              const result = await response.json();

                           if (result.success) {
               alert("Course updated successfully!");
               showCourses();
               updateDashboardStats(); // Refresh dashboard stats
             } else {
               alert("Error updating course: " + result.message);
             }
            } catch (error) {
              console.error('Error:', error);
              alert("Error updating course. Please try again.");
            } finally {
              // Reset button state
              const submitBtn = this.querySelector('button[type="submit"]');
              submitBtn.textContent = originalText;
              submitBtn.disabled = false;
            }
          });

      // Profile modal functions
      function openProfile() {
        document.getElementById("profileModal").classList.remove("hidden");
        document.body.style.overflow = "hidden";
      }

      function closeProfile() {
        document.getElementById("profileModal").classList.add("hidden");
        document.body.style.overflow = "auto";
      }

      // Sign out function
      function signOut() {
        // Show confirmation dialog
        if (confirm('Are you sure you want to sign out?')) {
          // Close profile modal
          closeProfile();
          
          // Show loading state
          document.body.style.cursor = 'wait';
          
          // Redirect to welcome page (root)
          setTimeout(() => {
            window.location.href = '/';
          }, 500);
        }
      }

      // Event listeners
      document
        .getElementById("notificationBtn")
        .addEventListener("click", function () {
          alert(
            "You have 8 new notifications:\n• New student enrolled\n• Course review received\n• Payment processed\n• Message from student\n• Course completion milestone\n• New course suggestion\n• System update\n• Monthly report ready"
          );
        });

      // Close modals when clicking outside
      document
        .getElementById("courseDetailModal")
        .addEventListener("click", function (e) {
          if (e.target === this) {
            closeCourseDetail();
          }
        });

      document
        .getElementById("profileModal")
        .addEventListener("click", function (e) {
          if (e.target === this) {
            closeProfile();
          }
        });

      // Button interactions
      document.querySelectorAll("button").forEach((button) => {
        button.addEventListener("click", function () {
          const buttonText = this.textContent.trim();

          if (buttonText.includes("Edit Profile")) {
            alert(
              "Profile editing form would open here. Update your instructor information."
            );
          } else if (buttonText.includes("Settings")) {
            alert(
              "Settings panel would open here. Customize your instructor preferences."
            );
          } else if (buttonText.includes("Help & Support")) {
            alert(
              "Help center would open here. Get assistance with course creation and management."
            );
          } else if (buttonText.includes("Sign Out")) {
            if (confirm("Are you sure you want to sign out?")) {
              alert(
                "You have been signed out successfully. See you next time!"
              );
            }
          } else if (buttonText.includes("View Analytics")) {
            alert(
              "Analytics dashboard would open here. View detailed course performance metrics."
            );
          }
        });
      });

      // Responsive sidebar handling
      window.addEventListener("resize", function () {
        if (window.innerWidth >= 1024) {
          sidebar.classList.remove("-translate-x-full");
          sidebarOverlay.classList.add("hidden");
        } else {
          sidebar.classList.add("-translate-x-full");
        }
      });

      // Initialize
      if (window.innerWidth < 1024) {
        sidebar.classList.add("-translate-x-full");
      }

             // Load dashboard on page load
       showDashboard();
       
               // Update dashboard stats with real data
        async function updateDashboardStats() {
          try {
            // Get courses data from database
            const coursesResponse = await fetch('/api/courses/instructor/4');
            const coursesResult = await coursesResponse.json();
            
            if (coursesResult.success) {
              const courses = coursesResult.data;
              const totalCourses = courses.length;
              const totalStudents = courses.reduce((sum, course) => sum + (course.enrollment_count || 0), 0);
              
              // Update stats in the dashboard
              document.querySelector('.text-3xl.font-bold.text-purple-600').textContent = totalCourses;
              document.querySelector('.text-3xl.font-bold.text-blue-600').textContent = totalStudents;
              document.querySelector('.text-3xl.font-bold.text-yellow-600').textContent = '0.0'; // Default rating
              
              console.log(`Dashboard updated: ${totalCourses} courses, ${totalStudents} students`);
            } else {
              console.error('Failed to fetch courses:', coursesResult.message);
              // Set default values
              document.querySelector('.text-3xl.font-bold.text-purple-600').textContent = '0';
              document.querySelector('.text-3xl.font-bold.text-blue-600').textContent = '0';
              document.querySelector('.text-3xl.font-bold.text-yellow-600').textContent = '0.0';
            }
          } catch (error) {
            console.error('Error updating dashboard stats:', error);
            // Set default values if there's an error
            document.querySelector('.text-3xl.font-bold.text-purple-600').textContent = '0';
            document.querySelector('.text-3xl.font-bold.text-blue-600').textContent = '0';
            document.querySelector('.text-3xl.font-bold.text-yellow-600').textContent = '0.0';
          }
        }
       
               // Load categories from database
        async function loadCategories() {
          try {
            const response = await fetch('/api/courses/categories');
            const result = await response.json();
            
            if (result.success) {
              // Update both create and edit course forms
              const createCategorySelect = document.getElementById('courseCategory');
              const editCategorySelect = document.getElementById('editCourseCategory');
              
              // Clear existing options except the first one
              createCategorySelect.innerHTML = '<option value="">Select category</option>';
              editCategorySelect.innerHTML = '<option value="">Select category</option>';
              
              // Add categories from database
              result.data.forEach(category => {
                const createOption = document.createElement('option');
                createOption.value = category.id;
                createOption.textContent = category.display_name || category.title || category.name;
                createOption.title = category.description || '';
                createCategorySelect.appendChild(createOption);
                
                const editOption = document.createElement('option');
                editOption.value = category.id;
                editOption.textContent = category.display_name || category.title || category.name;
                editOption.title = category.description || '';
                editCategorySelect.appendChild(editOption);
              });
            }
          } catch (error) {
            console.error('Error loading categories:', error);
          }
        }
        
        // Load difficulty levels from database
        async function loadDifficultyLevels() {
          try {
            const response = await fetch('/api/courses/difficulty-levels');
            const result = await response.json();
            
            if (result.success) {
              // Update both create and edit course forms
              const createDifficultySelect = document.getElementById('courseDifficulty');
              const editDifficultySelect = document.getElementById('editCourseDifficulty');
              
              // Clear existing options except the first one
              createDifficultySelect.innerHTML = '<option value="">Select level</option>';
              editDifficultySelect.innerHTML = '<option value="">Select level</option>';
              
              // Add difficulty levels from database
              result.data.forEach(level => {
                const createOption = document.createElement('option');
                createOption.value = level.id;
                createOption.textContent = level.name;
                createOption.title = level.description || '';
                createDifficultySelect.appendChild(createOption);
                
                const editOption = document.createElement('option');
                editOption.value = level.id;
                editOption.textContent = level.name;
                editOption.title = level.description || '';
                editDifficultySelect.appendChild(editOption);
              });
            }
          } catch (error) {
            console.error('Error loading difficulty levels:', error);
          }
        }
        
        // Update stats when dashboard loads
        document.addEventListener('DOMContentLoaded', function() {
          updateDashboardStats();
          loadCategories();
          loadDifficultyLevels();
        });
    </script>
    <script>
      (function () {
        function c() {
          var b = a.contentDocument || a.contentWindow.document;
          if (b) {
            var d = b.createElement("script");
            d.innerHTML =
              "window.__CF$cv$params={r:'96e9aa2bc0a2799c',t:'MTc1NTEwMzMzNi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";
            b.getElementsByTagName("head")[0].appendChild(d);
          }
        }
        if (document.body) {
          var a = document.createElement("iframe");
          a.height = 1;
          a.width = 1;
          a.style.position = "absolute";
          a.style.top = 0;
          a.style.left = 0;
          a.style.border = "none";
          a.style.visibility = "hidden";
          document.body.appendChild(a);
          if ("loading" !== document.readyState) c();
          else if (window.addEventListener)
            document.addEventListener("DOMContentLoaded", c);
          else {
            var e = document.onreadystatechange || function () {};
            document.onreadystatechange = function (b) {
              e(b);
              "loading" !== document.readyState &&
                ((document.onreadystatechange = e), c());
            };
          }
        }
      })();
    </script>
  </body>
</html>
