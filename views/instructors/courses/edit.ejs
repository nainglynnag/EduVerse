<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EduVerse - Edit Course</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              "blue-950": "#1e3a8a",
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Main Content Area -->
    <main class="p-6">
      <!-- Edit Course Content -->
      <div id="editCourseContent">
        <div class="max-w-4xl mx-auto">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-800">Edit Course</h2>
            <p class="text-gray-600">Update your course information</p>
          </div>

          <form id="editCourseForm" class="space-y-8">
            <!-- Basic Information -->
            <div class="bg-white rounded-2xl p-6 shadow-lg">
              <h3 class="text-lg font-bold text-gray-800 mb-4">
                Basic Information
              </h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Course Title *</label
                  >
                  <input
                    type="text"
                    id="editCourseTitle"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Enter course title"
                  />
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Category *</label
                  >
                  <select
                    id="editCourseCategory"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select category</option>
                    <!-- Categories will be loaded dynamically -->
                  </select>
                </div>
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Short Description *</label
                  >
                  <textarea
                    id="editCourseDescription"
                    required
                    rows="3"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="Brief description of your course"
                  ></textarea>
                </div>
              </div>
            </div>

            <!-- Course Details -->
            <div class="bg-white rounded-2xl p-6 shadow-lg">
              <h3 class="text-lg font-bold text-gray-800 mb-4">
                Course Details
              </h3>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Price ($) *</label
                  >
                  <input
                    type="number"
                    id="editCoursePrice"
                    required
                    min="0"
                    step="0.01"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="0.00"
                  />
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Duration (hours) *</label
                  >
                  <input
                    type="number"
                    id="editCourseDuration"
                    required
                    min="1"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="10"
                  />
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Difficulty Level *</label
                  >
                  <select
                    id="editCourseDifficulty"
                    required
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select level</option>
                    <!-- Difficulty levels will be loaded dynamically -->
                  </select>
                </div>
              </div>
            </div>

            <!-- Course Content -->
            <div class="bg-white rounded-2xl p-6 shadow-lg">
              <h3 class="text-lg font-bold text-gray-800 mb-4">
                Course Content
              </h3>
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Learning Objectives</label
                  >
                  <textarea
                    id="editCourseObjectives"
                    rows="4"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="What will students learn from this course?"
                  ></textarea>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2"
                    >Prerequisites</label
                  >
                  <textarea
                    id="editCoursePrerequisites"
                    rows="3"
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    placeholder="What should students know before taking this course?"
                  ></textarea>
                </div>
              </div>
            </div>

            <!-- Form Actions -->
            <div class="flex justify-end space-x-4">
              <a
                href="/instructor/courses"
                class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Cancel
              </a>
              <button
                type="button"
                onclick="saveDraft()"
                class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                Save as Draft
              </button>
              <button
                type="submit"
                class="px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all"
              >
                Update Course
              </button>
            </div>
          </form>
        </div>
      </div>
    </main>

    <script>
      // Get course ID from URL
      function getCourseIdFromUrl() {
        const pathParts = window.location.pathname.split('/');
        return pathParts[pathParts.length - 2]; // /instructor/courses/{id}/edit
      }

      // Load categories from database
      async function loadCategories() {
        try {
          const response = await fetch('/api/courses/categories');
          const result = await response.json();
          
          if (result.success) {
            const categorySelect = document.getElementById('editCourseCategory');
            
            // Clear existing options except the first one
            categorySelect.innerHTML = '<option value="">Select category</option>';
            
            // Add categories from database
            result.data.forEach(category => {
              const option = document.createElement('option');
              option.value = category.id;
              option.textContent = category.display_name || category.title || category.name;
              option.title = category.description || '';
              categorySelect.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error loading categories:', error);
        }
      }
      
      // Load difficulty levels from database
      async function loadDifficultyLevels() {
        try {
          const response = await fetch('/api/courses/difficulty-levels');
          const result = await response.json();
          
          if (result.success) {
            const difficultySelect = document.getElementById('editCourseDifficulty');
            
            // Clear existing options except the first one
            difficultySelect.innerHTML = '<option value="">Select level</option>';
            
            // Add difficulty levels from database
            result.data.forEach(level => {
              const option = document.createElement('option');
              option.value = level.id;
              option.textContent = level.name;
              option.title = level.description || '';
              difficultySelect.appendChild(option);
            });
          }
        } catch (error) {
          console.error('Error loading difficulty levels:', error);
        }
      }

      // Load course data
      async function loadCourseData() {
        const courseId = getCourseIdFromUrl();
        if (!courseId) {
          alert("Course ID not found in URL");
          window.location.href = '/instructor/courses';
          return;
        }

        try {
          const response = await fetch(`/api/courses/${courseId}`);
          const result = await response.json();
          
          if (result.success) {
            const course = result.data;
            populateEditForm(course);
          } else {
            alert("Error loading course data: " + result.message);
            window.location.href = '/instructor/courses';
          }
        } catch (error) {
          console.error('Error loading course:', error);
          alert("Error loading course data. Please try again.");
          window.location.href = '/instructor/courses';
        }
      }

      // Populate edit form with course data
      function populateEditForm(course) {
        document.getElementById('editCourseTitle').value = course.title || '';
        document.getElementById('editCourseDescription').value = course.description || '';
        document.getElementById('editCoursePrice').value = course.price || 0;
        document.getElementById('editCourseDuration').value = course.duration || 1;
        document.getElementById('editCourseObjectives').value = course.objectives || '';
        document.getElementById('editCoursePrerequisites').value = course.prerequisites || '';
        
        // Set category and difficulty using actual IDs from database
        document.getElementById('editCourseCategory').value = course.category_id || '';
        document.getElementById('editCourseDifficulty').value = course.difficulty_id || '';
        
        // Store course ID for update
        document.getElementById('editCourseForm').setAttribute('data-course-id', course.id);
      }

      function saveDraft() {
        alert("Course saved as draft! You can continue editing later.");
      }

      // Edit form submission
      document
        .getElementById("editCourseForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();

          const courseId = this.getAttribute('data-course-id');
          if (!courseId) {
            alert("Error: Course ID not found");
            return;
          }

          // Get form data
          const courseData = {
            title: document.getElementById("editCourseTitle").value,
            category_id: parseInt(document.getElementById("editCourseCategory").value),
            difficulty_id: parseInt(document.getElementById("editCourseDifficulty").value),
            price: parseFloat(document.getElementById("editCoursePrice").value) || 0.00,
            description: document.getElementById("editCourseDescription").value,
            status: 'published'
          };

          try {
            // Show loading state
            const submitBtn = this.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            submitBtn.textContent = "Updating...";
            submitBtn.disabled = true;

            // Send to API
            const response = await fetch(`/api/courses/${courseId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(courseData)
            });

            const result = await response.json();

            if (result.success) {
              alert("Course updated successfully!");
              window.location.href = '/instructor/courses';
            } else {
              alert("Error updating course: " + result.message);
            }
          } catch (error) {
            console.error('Error:', error);
            alert("Error updating course. Please try again.");
          } finally {
            // Reset button state
            const submitBtn = this.querySelector('button[type="submit"]');
            submitBtn.textContent = originalText;
            submitBtn.disabled = false;
          }
        });

      // Initialize
      document.addEventListener('DOMContentLoaded', function() {
        loadCategories();
        loadDifficultyLevels();
        loadCourseData();
      });
    </script>
  </body>
</html>
