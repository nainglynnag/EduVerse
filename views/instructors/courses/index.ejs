<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EduVerse - My Courses</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              "blue-950": "#1e3a8a",
            },
          },
        },
      };
    </script>
  </head>
  <body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Main Content Area -->
    <main class="p-6">
      <!-- Courses Management Content -->
      <div id="coursesContent">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-2xl font-bold text-gray-800">My Courses</h2>
          <a href="/instructor/courses/create" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all flex items-center space-x-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path
                fill-rule="evenodd"
                d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                clip-rule="evenodd"
              />
            </svg>
            <span>Create New Course</span>
          </a>
        </div>

        <!-- Course Filters -->
        <div class="bg-white rounded-lg p-4 mb-6 shadow-sm">
          <div class="flex flex-wrap gap-4 items-center">
            <div class="flex space-x-2">
              <button
                class="px-4 py-2 bg-purple-100 text-purple-600 rounded-lg font-medium text-sm"
              >
                All Courses
              </button>
              <button
                class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
              >
                Published
              </button>
              <button
                class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
              >
                Draft
              </button>
              <button
                class="px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-lg text-sm"
              >
                Archived
              </button>
            </div>
            <div class="flex-1"></div>
            <div class="relative">
              <input
                type="text"
                placeholder="Search courses..."
                class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
              <svg
                class="w-4 h-4 text-gray-400 absolute left-3 top-3"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
            </div>
          </div>
        </div>

        <!-- Courses Grid -->
        <div
          class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
          id="coursesGrid"
        >
          <!-- Course cards will be populated by JavaScript -->
        </div>
      </div>
    </main>

    <!-- Course Detail Modal -->
    <div
      id="courseDetailModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4"
    >
      <div
        class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 id="modalCourseTitle" class="text-2xl font-bold text-gray-800">
              Course Title
            </h2>
            <button
              onclick="closeCourseDetail()"
              class="text-gray-500 hover:text-gray-700"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Course Info -->
            <div class="lg:col-span-2">
              <div class="space-y-6">
                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">Description</h3>
                  <p id="modalCourseDescription" class="text-gray-600"></p>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Learning Objectives
                  </h3>
                  <ul
                    id="modalCourseObjectives"
                    class="list-disc list-inside text-gray-600 space-y-1"
                  ></ul>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Course Lessons
                  </h3>
                  <div id="modalCourseLessons" class="space-y-2"></div>
                </div>
              </div>
            </div>

            <!-- Course Stats -->
            <div>
              <div class="bg-gray-50 rounded-lg p-4 mb-4">
                <h3 class="font-semibold text-gray-800 mb-4">
                  Course Statistics
                </h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Enrolled Students</span>
                    <span id="modalEnrolledStudents" class="font-medium"
                      >0</span
                    >
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Completion Rate</span>
                    <span id="modalCompletionRate" class="font-medium">0%</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Average Rating</span>
                    <span id="modalAverageRating" class="font-medium">0.0</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Total Revenue</span>
                    <span id="modalTotalRevenue" class="font-medium">$0</span>
                  </div>
                </div>
              </div>

              <div class="space-y-3">
                <button
                  onclick="editCourse()"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Edit Course
                </button>
                <button
                  onclick="duplicateCourse()"
                  class="w-full border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Duplicate Course
                </button>
                <button
                  onclick="deleteCourse()"
                  class="w-full bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
                >
                  Delete Course
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Populate courses grid
      async function populateCoursesGrid() {
        const coursesGrid = document.getElementById("coursesGrid");

        try {
          // Show loading state
          coursesGrid.innerHTML = `
            <div class="col-span-full text-center py-12">
              <div class="bg-white rounded-2xl p-8 shadow-lg">
                <svg class="w-8 h-8 text-gray-400 mx-auto mb-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                <p class="text-gray-600">Loading courses...</p>
              </div>
            </div>
          `;

          // Fetch courses from API
          const response = await fetch('/api/courses/instructor/4'); // Default instructor ID
          const result = await response.json();

          if (result.success && result.data.length > 0) {
            coursesGrid.innerHTML = result.data
              .map(
                (course) => `
                    <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-shadow overflow-hidden">
                        <div class="bg-gradient-to-r from-purple-500 to-pink-500 h-32 flex items-center justify-center relative">
                            <svg class="w-12 h-12 text-white" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                            </svg>
                            <div class="absolute top-2 right-2">
                                <span class="px-2 py-1 text-xs rounded-full ${
                                  course.status === "published"
                                    ? "bg-green-100 text-green-800"
                                    : "bg-yellow-100 text-yellow-800"
                                }">${course.status}</span>
                            </div>
                        </div>
                        <div class="p-6">
                            <div class="flex items-center justify-between mb-2">
                                <h3 class="font-bold text-gray-800">${
                                  course.title
                                }</h3>
                            </div>
                            <p class="text-gray-600 text-sm mb-4">${
                               course.description || 'No description available'
                            }</p>
                            <div class="space-y-2 mb-4">
                                <div class="flex items-center justify-between text-sm text-gray-600">
                                    <span class="font-medium">${course.category_display_name || course.category_name || 'Uncategorized'}</span>
                                    <span class="font-bold">$${course.price || 0}</span>
                                </div>
                                <div class="flex items-center justify-between text-sm text-gray-600">
                                    <span>${course.difficulty_name || 'Unknown'}</span>
                                    <span>${course.enrollment_count || 0} students</span>
                                </div>
                            </div>
                            <div class="flex space-x-2">
                                <button onclick="openCourseDetail(${
                                  course.id
                                })" class="flex-1 bg-purple-100 text-purple-600 px-4 py-2 rounded-lg hover:bg-purple-200 transition-colors text-sm">
                                    View Details
                                </button>
                                <button onclick="editCourse(${
                                  course.id
                                })" class="flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                                    Edit
                                </button>
                            </div>
                        </div>
                    </div>
                `
              )
              .join("");
          } else {
            // Show empty state
            coursesGrid.innerHTML = `
              <div class="col-span-full text-center py-12">
                <div class="bg-white rounded-2xl p-8 shadow-lg">
                  <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                  </svg>
                  <h3 class="text-lg font-semibold text-gray-800 mb-2">No Courses Yet</h3>
                  <p class="text-gray-600 mb-4">You haven't created any courses yet. Start by creating your first course!</p>
                  <a href="/instructor/courses/create" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all">
                    Create Your First Course
                  </a>
                </div>
              </div>
            `;
          }
        } catch (error) {
          console.error('Error fetching courses:', error);
          coursesGrid.innerHTML = `
            <div class="col-span-full text-center py-12">
              <div class="bg-white rounded-2xl p-8 shadow-lg">
                <svg class="w-16 h-16 text-red-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
                <h3 class="text-lg font-semibold text-gray-800 mb-2">Error Loading Courses</h3>
                <p class="text-gray-600 mb-4">There was an error loading your courses. Please try again.</p>
                <button onclick="populateCoursesGrid()" class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-all">
                  Try Again
                </button>
              </div>
            </div>
          `;
        }
      }

      // Course detail modal functions
      async function openCourseDetail(courseId) {
        try {
          const response = await fetch(`/api/courses/${courseId}`);
          const result = await response.json();
          
          if (result.success) {
            const course = result.data;

            document.getElementById("modalCourseTitle").textContent = course.title;
            document.getElementById("modalCourseDescription").textContent =
              course.description || 'No description available';
            document.getElementById("modalEnrolledStudents").textContent = course.enrollment_count || "0";
            document.getElementById("modalCompletionRate").textContent = "0%"; // Placeholder for future
            document.getElementById("modalAverageRating").textContent = course.instructor_rating || "0.0";
            document.getElementById("modalTotalRevenue").textContent = `$${((course.price || 0) * (course.enrollment_count || 0)).toFixed(2)}`;

            // Store course ID for deletion
            document.getElementById("courseDetailModal").setAttribute('data-course-id', course.id);

            // Populate objectives (placeholder for now)
            const objectivesList = document.getElementById("modalCourseObjectives");
            objectivesList.innerHTML = '<li>Learning objectives will be displayed here</li>';

            // Populate lessons (placeholder for now)
            const lessonsList = document.getElementById("modalCourseLessons");
            lessonsList.innerHTML = `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <span class="text-sm font-medium">1. Course Introduction</span>
                    <span class="text-xs text-gray-600">15 min</span>
                </div>
            `;

            document.getElementById("courseDetailModal").classList.remove("hidden");
            document.body.style.overflow = "hidden";
          } else {
            alert("Error loading course details: " + result.message);
          }
        } catch (error) {
          console.error('Error loading course details:', error);
          alert("Error loading course details. Please try again.");
        }
      }

      function closeCourseDetail() {
        document.getElementById("courseDetailModal").classList.add("hidden");
        document.body.style.overflow = "auto";
      }

      // Course management functions
      function editCourse(courseId) {
        window.location.href = `/instructor/courses/${courseId}/edit`;
      }

      function duplicateCourse() {
        alert("Course duplicated successfully! You can now edit the copy.");
        closeCourseDetail();
      }

      async function deleteCourse() {
        const courseId = document.getElementById('courseDetailModal').getAttribute('data-course-id');
        
        if (!courseId) {
          alert("Error: Course ID not found");
          return;
        }

        if (
          confirm(
            "Are you sure you want to delete this course? This action cannot be undone."
          )
        ) {
          try {
            const response = await fetch(`/api/courses/${courseId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json',
              }
            });

            const result = await response.json();

            if (result.success) {
              alert("Course deleted successfully.");
              closeCourseDetail();
              populateCoursesGrid(); // Refresh the grid
            } else {
              alert("Error deleting course: " + result.message);
            }
          } catch (error) {
            console.error('Error:', error);
            alert("Error deleting course. Please try again.");
          }
        }
      }

      // Close modals when clicking outside
      document
        .getElementById("courseDetailModal")
        .addEventListener("click", function (e) {
          if (e.target === this) {
            closeCourseDetail();
          }
        });

      // Initialize
      document.addEventListener('DOMContentLoaded', function() {
        populateCoursesGrid();
      });
    </script>
  </body>
</html>
