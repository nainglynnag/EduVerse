<!-- Courses Management Content -->
<div id="coursesContent">
        <!-- Success Messages -->
        <% if (typeof req !== 'undefined' && req.query.draft_saved === 'true') { %>
          <div class="mb-4 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              Course saved as draft successfully!
            </div>
          </div>
        <% } %>
        
        <% if (typeof req !== 'undefined' && req.query.course_published === 'true') { %>
          <div class="mb-4 p-4 bg-blue-100 border border-blue-400 text-blue-700 rounded-lg">
            <div class="flex items-center">
              <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
              </svg>
              Course published successfully!
            </div>
          </div>
        <% } %>

        <!-- Minimal Navigation Bar -->
        <div class="border-b border-gray-200 pb-3 mb-4">
          <!-- Mobile Header -->
          <div class="block md:hidden">
            <div class="mb-3">
              <h1 class="text-lg font-semibold text-gray-800">My Courses</h1>
            </div>
            <!-- Mobile Search and Sort -->
            <div class="flex space-x-3 mb-3">
              <div class="relative flex-1">
                <input
                  type="text"
                  id="coursesSearchInput"
                  placeholder="Search courses..."
                  class="w-full pl-8 pr-3 py-2 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                />
                <svg
                  class="w-4 h-4 text-gray-400 absolute left-2.5 top-3"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                  />
                </svg>
              </div>
              <div class="relative">
                <select
                  id="sortFilterMobile"
                  class="appearance-none bg-white border border-gray-300 rounded-lg px-3 py-2 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent cursor-pointer min-w-[120px]"
                >
                  <option value="newest">Newest</option>
                  <option value="oldest">Oldest</option>
                  <option value="title-asc">A-Z</option>
                  <option value="title-desc">Z-A</option>
                  <option value="price-high">Price ↓</option>
                  <option value="price-low">Price ↑</option>
                  <option value="students-high">Students ↓</option>
                  <option value="students-low">Students ↑</option>
                </select>
                <svg
                  class="w-4 h-4 text-gray-400 absolute right-2 top-3 pointer-events-none"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
              <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"
              />
            </svg>
              </div>
            </div>
            <!-- Mobile Filter Tabs -->
            <div class="flex space-x-1 overflow-x-auto">
              <button
                onclick="filterCourses('all')"
                id="filter-all"
                class="px-3 py-1.5 text-sm font-medium text-purple-600 border-b-2 border-purple-600 filter-btn whitespace-nowrap"
              >
                All
              </button>
              <button
                onclick="filterCourses('published')"
                id="filter-published"
                class="px-3 py-1.5 text-sm font-medium text-gray-500 hover:text-gray-700 filter-btn whitespace-nowrap"
              >
                Published
              </button>
              <button
                onclick="filterCourses('draft')"
                id="filter-draft"
                class="px-3 py-1.5 text-sm font-medium text-gray-500 hover:text-gray-700 filter-btn whitespace-nowrap"
              >
                Draft
              </button>
            </div>
        </div>

          <!-- Desktop Header -->
          <div class="hidden md:flex items-center justify-between">
            <div class="flex items-center space-x-6">
              <h1 class="text-xl font-semibold text-gray-800">My Courses</h1>
              <div class="flex space-x-1">
               <button
                 onclick="filterCourses('all')"
                 id="filter-all"
                  class="px-3 py-1.5 text-sm font-medium text-purple-600 border-b-2 border-purple-600 filter-btn"
               >
                  All
               </button>
               <button
                 onclick="filterCourses('published')"
                 id="filter-published"
                  class="px-3 py-1.5 text-sm font-medium text-gray-500 hover:text-gray-700 filter-btn"
               >
                 Published
               </button>
               <button
                 onclick="filterCourses('draft')"
                 id="filter-draft"
                  class="px-3 py-1.5 text-sm font-medium text-gray-500 hover:text-gray-700 filter-btn"
               >
                 Draft
               </button>
              </div>
            </div>
            <div class="flex items-center space-x-3">
            <div class="relative">
              <input
                type="text"
                id="coursesSearchInput"
                  placeholder="Search courses..."
                  class="w-56 pl-8 pr-3 py-1.5 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              />
              <svg
                  class="w-4 h-4 text-gray-400 absolute left-2.5 top-2"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
              </div>
              <div class="relative">
                <select
                  id="sortFilterDesktop"
                  class="appearance-none bg-white border border-gray-300 rounded-lg px-3 py-1.5 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent cursor-pointer"
                >
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                  <option value="title-asc">Title A-Z</option>
                  <option value="title-desc">Title Z-A</option>
                  <option value="price-high">Price High-Low</option>
                  <option value="price-low">Price Low-High</option>
                  <option value="students-high">Most Students</option>
                  <option value="students-low">Least Students</option>
                </select>
                <svg
                  class="w-4 h-4 text-gray-400 absolute right-2 top-2 pointer-events-none"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M19 9l-7 7-7-7"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>



        <!-- Responsive Courses Grid -->
        <div
          class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6 lg:gap-8"
          id="coursesGrid"
        >
          <% if (courses && courses.length > 0) { %>
            <% courses.forEach(course => { %>
              <div class="bg-white rounded-xl md:rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden course-card group transform hover:-translate-y-1"
                   data-title="<%= course.title.toLowerCase() %>"
                   data-category="<%= (course.category_name || '').toLowerCase() %>"
                   data-difficulty="<%= (course.difficulty_name || '').toLowerCase() %>"
                   data-status="<%= (course.status || '').toLowerCase() %>"
                   data-description="<%= (course.description || '').toLowerCase() %>"
                   data-created="<%= course.created_at %>"
                   data-students="<%= course.enrollment_count || 0 %>"
                   data-price="<%= course.price || 0 %>">
                
                <!-- Course Header -->
                <div class="relative h-32 md:h-36 bg-gradient-to-br from-purple-600 via-pink-500 to-indigo-600 flex items-center justify-center overflow-hidden">
                  <!-- Background Pattern -->
                  <div class="absolute inset-0 opacity-10">
                    <svg class="w-full h-full" viewBox="0 0 100 100" fill="currentColor">
                      <circle cx="20" cy="20" r="2"/>
                      <circle cx="80" cy="20" r="2"/>
                      <circle cx="20" cy="80" r="2"/>
                      <circle cx="80" cy="80" r="2"/>
                      <circle cx="50" cy="50" r="1"/>
                    </svg>
                  </div>
                  
                  <!-- Course Icon -->
                  <div class="relative z-10">
                    <div class="w-12 h-12 md:w-14 md:h-14 bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center">
                      <svg class="w-6 h-6 md:w-7 md:h-7 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z"/>
                  </svg>
                    </div>
                  </div>
                  
                  <!-- Status Badge -->
                  <div class="absolute top-3 right-3">
                    <span class="px-2 py-1 text-xs font-semibold rounded-full backdrop-blur-sm <%= course.status === 'published' ? 'bg-green-500/90 text-white' : 'bg-yellow-500/90 text-white' %>">
                      <%= course.status === 'published' ? 'Published' : 'Draft' %>
                    </span>
                  </div>
                  
                  <!-- Price Badge -->
                  <div class="absolute bottom-3 left-3">
                    <span class="px-2 py-1 text-xs font-bold bg-white/90 text-purple-600 rounded-full">
                      $<%= course.price || 0 %>
                    </span>
                  </div>
                </div>
                
                <!-- Course Content -->
                <div class="p-4">
                  <!-- Course Title & Description -->
                  <div class="mb-4">
                    <h3 class="font-bold text-gray-800 text-base leading-tight group-hover:text-purple-600 transition-colors mb-2">
                      <%= course.title %>
                    </h3>
                    <p class="text-gray-500 text-sm line-clamp-2">
                      <%= course.description || 'No description available' %>
                    </p>
                  </div>
                  
                  <!-- Course Meta Info -->
                  <div class="space-y-3 mb-4">
                    <!-- Category & Difficulty Row -->
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-2">
                        <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span class="text-sm font-medium text-gray-600"><%= course.category_name || 'Uncategorized' %></span>
                      </div>
                      <div class="flex items-center space-x-1 text-gray-500">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                        </svg>
                        <span class="text-sm"><%= course.difficulty_name || 'Unknown' %></span>
                      </div>
                    </div>
                    
                    <!-- Students & Date Row -->
                    <div class="flex items-center justify-between">
                      <div class="flex items-center space-x-1 text-gray-500">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                        </svg>
                        <span class="text-sm"><%= course.enrollment_count || 0 %> students</span>
                  </div>
                      <div class="flex items-center space-x-1 text-gray-500">
                        <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"/>
                        </svg>
                        <span class="text-sm"><%= new Date(course.created_at).toLocaleDateString() %></span>
                    </div>
                    </div>
                  </div>
                  
                  <!-- Action Buttons -->
                  <div class="flex space-x-2">
                    <a href="/instructor/courses/<%= course.id %>" class="flex-1 bg-gradient-to-r from-purple-600 to-pink-600 text-white px-3 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-200 text-sm font-medium text-center shadow-md hover:shadow-lg">
                      View Details
                    </a>
                    <button onclick="editCourse('<%= course.id %>')" class="px-3 py-2 border-2 border-gray-300 text-gray-700 rounded-lg hover:border-purple-400 hover:bg-purple-50 transition-all duration-200 text-sm font-medium">
                      Edit
                    </button>
                    <button onclick="deleteCourse('<%= course.id %>', '<%= course.title %>')" class="px-3 py-2 bg-red-50 text-red-600 rounded-lg hover:bg-red-100 transition-all duration-200 text-sm font-medium border border-red-200">
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            <% }); %>
          <% } else { %>
            <!-- Responsive Empty State -->
            <div class="col-span-full text-center py-8 md:py-16">
              <div class="bg-white rounded-xl md:rounded-3xl p-6 md:p-12 shadow-xl border border-gray-100">
                <!-- Animated Icon -->
                <div class="relative mb-6 md:mb-8">
                  <div class="w-16 h-16 md:w-24 md:h-24 bg-gradient-to-br from-purple-100 to-pink-100 rounded-full flex items-center justify-center mx-auto">
                    <svg class="w-8 h-8 md:w-12 md:h-12 text-purple-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.35 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z"/>
                </svg>
                  </div>
                  <!-- Floating Elements -->
                  <div class="absolute -top-1 -right-1 md:-top-2 md:-right-2 w-4 h-4 md:w-6 md:h-6 bg-yellow-400 rounded-full animate-pulse"></div>
                  <div class="absolute -bottom-1 -left-1 md:-bottom-2 md:-left-2 w-3 h-3 md:w-4 md:h-4 bg-pink-400 rounded-full animate-pulse delay-1000"></div>
                </div>
                
                <h3 class="text-xl md:text-2xl font-bold text-gray-800 mb-3">No Courses Yet</h3>
                <p class="text-gray-600 mb-6 md:mb-8 max-w-md mx-auto leading-relaxed text-sm md:text-base">
                  You haven't created any courses yet. Start your teaching journey by creating your first course and sharing your knowledge with students worldwide.
                </p>
                
                <div class="flex flex-col sm:flex-row gap-3 md:gap-4 justify-center">
                  <a href="/instructor/courses/create" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 md:px-8 py-2.5 md:py-3 rounded-lg md:rounded-xl hover:from-purple-700 hover:to-pink-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 text-sm md:text-base">
                  Create Your First Course
                </a>
                  <a href="#" class="border-2 border-gray-200 text-gray-700 px-6 md:px-8 py-2.5 md:py-3 rounded-lg md:rounded-xl hover:border-purple-300 hover:bg-purple-50 transition-all duration-200 font-medium text-sm md:text-base">
                    View Course Templates
                  </a>
                </div>
                
                <!-- Quick Tips -->
                <div class="mt-8 md:mt-12 pt-6 md:pt-8 border-t border-gray-100">
                  <h4 class="text-xs md:text-sm font-semibold text-gray-700 mb-3 md:mb-4">Quick Tips to Get Started:</h4>
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-3 md:gap-4 text-xs md:text-sm text-gray-600">
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                      <span>Plan your course structure</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-pink-500 rounded-full"></div>
                      <span>Create engaging content</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="w-2 h-2 bg-indigo-500 rounded-full"></div>
                      <span>Set clear learning objectives</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Course Detail Modal -->
    <div
      id="courseDetailModal"
      class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4"
    >
      <div
        class="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto"
      >
        <div class="p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 id="modalCourseTitle" class="text-2xl font-bold text-gray-800">
              Course Title
            </h2>
            <button
              onclick="closeCourseDetail()"
              class="text-gray-500 hover:text-gray-700"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>

          <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <!-- Course Info -->
            <div class="lg:col-span-2">
              <div class="space-y-6">
                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">Description</h3>
                  <p id="modalCourseDescription" class="text-gray-600"></p>
                </div>

                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <h3 class="font-semibold text-gray-800 mb-2">Category</h3>
                    <p id="modalCourseCategory" class="text-gray-600"></p>
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-800 mb-2">Price</h3>
                    <p id="modalCoursePrice" class="text-gray-600"></p>
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-800 mb-2">Difficulty</h3>
                    <p id="modalCourseDifficulty" class="text-gray-600"></p>
                  </div>
                  <div>
                    <h3 class="font-semibold text-gray-800 mb-2">Status</h3>
                    <p id="modalCourseStatus" class="text-gray-600"></p>
                  </div>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Learning Objectives
                  </h3>
                  <ul
                    id="modalCourseObjectives"
                    class="list-disc list-inside text-gray-600 space-y-1"
                  ></ul>
                </div>

                <div>
                  <h3 class="font-semibold text-gray-800 mb-2">
                    Course Lessons
                  </h3>
                  <div id="modalCourseLessons" class="space-y-2"></div>
                </div>
              </div>
            </div>

            <!-- Course Stats -->
            <div>
              <div class="bg-gray-50 rounded-lg p-4 mb-4">
                <h3 class="font-semibold text-gray-800 mb-4">
                  Course Statistics
                </h3>
                <div class="space-y-3">
                  <div class="flex justify-between">
                    <span class="text-gray-600">Enrolled Students</span>
                    <span id="modalEnrolledStudents" class="font-medium"
                      >0</span
                    >
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Completion Rate</span>
                    <span id="modalCompletionRate" class="font-medium">0%</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Average Rating</span>
                    <span id="modalAverageRating" class="font-medium">0.0</span>
                  </div>
                  <div class="flex justify-between">
                    <span class="text-gray-600">Total Revenue</span>
                    <span id="modalTotalRevenue" class="font-medium">$0</span>
                  </div>
                </div>
              </div>

              <div class="space-y-3">
                <button
                  onclick="editCourse()"
                  class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Edit Course
                </button>
                <button
                  onclick="duplicateCourse()"
                  class="w-full border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  Duplicate Course
                </button>
                <button
                  onclick="deleteCourse()"
                  class="w-full bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors"
                >
                  Delete Course
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

                   <script>
        // Course filtering functionality
        let currentFilter = 'all';
        let allCourses = [];

        // Initialize courses data from server-side rendering
        document.addEventListener('DOMContentLoaded', function() {
          // Get all course cards
          const courseCards = document.querySelectorAll('#coursesGrid > div');
          allCourses = Array.from(courseCards);
          
          // Update filter counts
          updateFilterCounts();
          
          // Initialize search functionality
          initializeSearch();
          
          // Initialize sort functionality
          initializeSort();
          
          // Fallback: try again after a short delay in case DOM isn't fully ready
          setTimeout(() => {
            const sortFilterMobile = document.getElementById('sortFilterMobile');
            const sortFilterDesktop = document.getElementById('sortFilterDesktop');
            if (!sortFilterMobile && !sortFilterDesktop) {
              console.log('Retrying sort initialization...');
              initializeSort();
            }
          }, 100);
        });
        
        // Function to update filter counts
        function updateFilterCounts() {
          const courseCards = document.querySelectorAll('#coursesGrid > div:not(.col-span-full)');
          let allCount = 0;
          let publishedCount = 0;
          let draftCount = 0;
          
          courseCards.forEach(card => {
            const statusBadge = card.querySelector('.px-3.py-1.text-xs.font-semibold.rounded-full');
            const courseStatus = statusBadge ? statusBadge.textContent.trim().toLowerCase() : '';
            const dataStatus = card.getAttribute('data-status') || '';
            
            allCount++;
            if (courseStatus === 'published' || dataStatus === 'published') {
              publishedCount++;
            } else if (courseStatus === 'draft' || dataStatus === 'draft') {
              draftCount++;
            }
          });
          
          // Update button text with counts
          const allBtn = document.getElementById('filter-all');
          const publishedBtn = document.getElementById('filter-published');
          const draftBtn = document.getElementById('filter-draft');
          
          if (allBtn) {
            allBtn.textContent = `All (${allCount})`;
          }
          if (publishedBtn) {
            publishedBtn.textContent = `Published (${publishedCount})`;
          }
          if (draftBtn) {
            draftBtn.textContent = `Draft (${draftCount})`;
          }
        }

                 function filterCourses(status) {
           currentFilter = status;
           
           // Update button styles for minimal tab design
           document.querySelectorAll('.filter-btn').forEach(btn => {
             // Remove active styles
             btn.classList.remove('text-purple-600', 'border-b-2', 'border-purple-600');
             btn.classList.remove('text-gray-500', 'hover:text-gray-700');
             
             // Add default inactive styles
             btn.classList.add('text-gray-500', 'hover:text-gray-700');
           });
           
           // Highlight active button
           const activeButton = document.getElementById(`filter-${status}`);
           activeButton.classList.remove('text-gray-500', 'hover:text-gray-700');
           activeButton.classList.add('text-purple-600', 'border-b-2', 'border-purple-600');
           
           // Get all course cards (excluding any empty state divs)
           const courseCards = document.querySelectorAll('#coursesGrid > div:not(.col-span-full)');
           let visibleCount = 0;
           
           courseCards.forEach(card => {
             // Look for the status badge in the new design
             const statusBadge = card.querySelector('.px-3.py-1.text-xs.font-semibold.rounded-full');
             const courseStatus = statusBadge ? statusBadge.textContent.trim().toLowerCase() : '';
             
             // Also check the data-status attribute as a fallback
             const dataStatus = card.getAttribute('data-status') || '';
             
             // Determine if this course matches the filter
             let matchesFilter = false;
             if (status === 'all') {
               matchesFilter = true;
             } else if (courseStatus === status || dataStatus === status) {
               matchesFilter = true;
             }
             
             if (matchesFilter) {
               card.style.display = 'block';
               visibleCount++;
             } else {
               card.style.display = 'none';
             }
           });
           
           // Handle empty state
           const existingEmptyState = document.querySelector('#coursesGrid .col-span-full');
           
           if (visibleCount === 0 && status !== 'all') {
             // Show empty state for filtered results
             if (!existingEmptyState || !existingEmptyState.querySelector('.text-gray-400')) {
               const emptyStateHtml = `
                 <div class="col-span-full text-center py-12">
                   <div class="bg-white rounded-2xl p-8 shadow-lg">
                     <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                       <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
                     </svg>
                     <h3 class="text-lg font-semibold text-gray-800 mb-2">No ${status.charAt(0).toUpperCase() + status.slice(1)} Courses</h3>
                     <p class="text-gray-600 mb-4">You don't have any ${status} courses yet.</p>
                     <button onclick="filterCourses('all')" class="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 transition-all">
                       View All Courses
                     </button>
                   </div>
                 </div>
               `;
               document.getElementById('coursesGrid').insertAdjacentHTML('beforeend', emptyStateHtml);
             }
           } else {
             // Remove empty state if it exists
             if (existingEmptyState) {
               existingEmptyState.remove();
             }
           }
              
              // Update filter counts after filtering
              updateFilterCounts();
            }

        // Search functionality
        function initializeSearch() {
          const searchInputs = document.querySelectorAll('#coursesSearchInput');
          
          searchInputs.forEach(searchInput => {
            searchInput.addEventListener('input', function() {
              const searchTerm = this.value.toLowerCase().trim();
              searchCourses(searchTerm);
            });
          });
        }

        function searchCourses(searchTerm) {
          const courseCards = document.querySelectorAll('#coursesGrid > div:not(.col-span-full)');
          let visibleCount = 0;

          courseCards.forEach(card => {
            const title = card.getAttribute('data-title') || '';
            const category = card.getAttribute('data-category') || '';
            const difficulty = card.getAttribute('data-difficulty') || '';
            const status = card.getAttribute('data-status') || '';
            const description = card.getAttribute('data-description') || '';
            
            // Check if course matches search term
            const matchesSearch = searchTerm === '' || (
              title.includes(searchTerm) || 
              category.includes(searchTerm) || 
              difficulty.includes(searchTerm) || 
              status.includes(searchTerm) ||
              description.includes(searchTerm)
            );
            
            // Check if course matches current filter
            let matchesFilter = true;
            if (currentFilter && currentFilter !== 'all') {
              const statusBadge = card.querySelector('.px-3.py-1.text-xs.font-semibold.rounded-full, .px-2.py-1.text-xs.font-semibold.rounded-full');
              const courseStatus = statusBadge ? statusBadge.textContent.trim().toLowerCase() : '';
              const dataStatus = card.getAttribute('data-status') || '';
              
              matchesFilter = courseStatus === currentFilter || dataStatus === currentFilter;
            }
            
            if (matchesSearch && matchesFilter) {
              card.style.display = 'block';
              visibleCount++;
            } else {
              card.style.display = 'none';
            }
          });
          
          // Handle empty state for search results
          const existingEmptyState = document.querySelector('#coursesGrid .col-span-full');
          
          if (visibleCount === 0 && searchTerm !== '') {
            // Show empty state for search results
            if (!existingEmptyState || !existingEmptyState.querySelector('.text-gray-400')) {
              const emptyStateHtml = `
                <div class="col-span-full text-center py-12">
                  <div class="bg-white rounded-2xl p-8 shadow-lg">
                    <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"/>
                    </svg>
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">No Courses Found</h3>
                    <p class="text-gray-600 mb-4">No courses match your search criteria "<span class="font-medium">${searchTerm}</span>".</p>
                    <button onclick="clearSearch()" class="bg-gradient-to-r from-purple-600 to-pink-600 text-white px-6 py-2 rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all">
                      Clear Search
                    </button>
                  </div>
                </div>
              `;
              document.getElementById('coursesGrid').insertAdjacentHTML('beforeend', emptyStateHtml);
            }
          } else {
            // Remove empty state if it exists
            if (existingEmptyState) {
              existingEmptyState.remove();
            }
          }
        }

        function clearSearch() {
          const searchInputs = document.querySelectorAll('#coursesSearchInput');
          searchInputs.forEach(input => {
            input.value = '';
          });
          searchCourses('');
        }

        // Make clearSearch available globally
        window.clearSearch = clearSearch;

        // Sort functionality
        function initializeSort() {
          const sortFilterMobile = document.getElementById('sortFilterMobile');
          const sortFilterDesktop = document.getElementById('sortFilterDesktop');
          
          console.log('Initializing sort functionality...');
          console.log('Mobile sort filter:', sortFilterMobile);
          console.log('Desktop sort filter:', sortFilterDesktop);
          
          // Add event listener to mobile sort dropdown
          if (sortFilterMobile) {
            sortFilterMobile.addEventListener('change', function() {
              const sortValue = this.value;
              console.log('Mobile sort dropdown changed to:', sortValue);
              sortCourses(sortValue);
              // Sync desktop dropdown
              if (sortFilterDesktop) {
                sortFilterDesktop.value = sortValue;
              }
            });
            console.log('Mobile sort event listener added successfully');
          }
          
          // Add event listener to desktop sort dropdown
          if (sortFilterDesktop) {
            sortFilterDesktop.addEventListener('change', function() {
              const sortValue = this.value;
              console.log('Desktop sort dropdown changed to:', sortValue);
              sortCourses(sortValue);
              // Sync mobile dropdown
              if (sortFilterMobile) {
                sortFilterMobile.value = sortValue;
              }
            });
            console.log('Desktop sort event listener added successfully');
          }
          
          if (!sortFilterMobile && !sortFilterDesktop) {
            console.error('No sort filter elements found!');
          }
        }

        function sortCourses(sortValue) {
          console.log('Sorting courses by:', sortValue);
          const courseCards = Array.from(document.querySelectorAll('#coursesGrid > div:not(.col-span-full)'));
          const coursesGrid = document.getElementById('coursesGrid');
          
          console.log('Found course cards:', courseCards.length);
          console.log('Found courses grid:', coursesGrid);
          
          // Remove empty state if it exists
          const existingEmptyState = document.querySelector('#coursesGrid .col-span-full');
          if (existingEmptyState) {
            existingEmptyState.remove();
          }
          
          // Sort the course cards based on the selected option
          courseCards.sort((a, b) => {
            switch (sortValue) {
              case 'newest':
                const dateA = new Date(a.getAttribute('data-created') || '1970-01-01');
                const dateB = new Date(b.getAttribute('data-created') || '1970-01-01');
                return dateB - dateA;
                
              case 'oldest':
                const dateA2 = new Date(a.getAttribute('data-created') || '1970-01-01');
                const dateB2 = new Date(b.getAttribute('data-created') || '1970-01-01');
                return dateA2 - dateB2;
                
              case 'title-asc':
                const titleA = a.getAttribute('data-title') || '';
                const titleB = b.getAttribute('data-title') || '';
                return titleA.localeCompare(titleB);
                
              case 'title-desc':
                const titleA2 = a.getAttribute('data-title') || '';
                const titleB2 = b.getAttribute('data-title') || '';
                return titleB2.localeCompare(titleA2);
                
              case 'price-high':
                const priceA = parseFloat(a.getAttribute('data-price') || '0');
                const priceB = parseFloat(b.getAttribute('data-price') || '0');
                return priceB - priceA;
                
              case 'price-low':
                const priceA2 = parseFloat(a.getAttribute('data-price') || '0');
                const priceB2 = parseFloat(b.getAttribute('data-price') || '0');
                return priceA2 - priceB2;
                
              case 'students-high':
                const studentsA = parseInt(a.getAttribute('data-students') || '0');
                const studentsB = parseInt(b.getAttribute('data-students') || '0');
                return studentsB - studentsA;
                
              case 'students-low':
                const studentsA2 = parseInt(a.getAttribute('data-students') || '0');
                const studentsB2 = parseInt(b.getAttribute('data-students') || '0');
                return studentsA2 - studentsB2;
                
              default:
                return 0;
            }
          });
          
          // Re-append the sorted cards to the grid
          courseCards.forEach(card => {
            coursesGrid.appendChild(card);
          });
          
          console.log('Sort completed successfully');
        }

        // Make sortCourses available globally for testing
        window.sortCourses = sortCourses;
        window.testSort = function() {
          console.log('=== TESTING SORT FUNCTIONALITY ===');
          const sortFilterMobile = document.getElementById('sortFilterMobile');
          const sortFilterDesktop = document.getElementById('sortFilterDesktop');
          
          console.log('Mobile sort filter:', sortFilterMobile);
          console.log('Desktop sort filter:', sortFilterDesktop);
          
          if (sortFilterMobile) {
            console.log('Mobile current sort value:', sortFilterMobile.value);
            console.log('Mobile available options:', Array.from(sortFilterMobile.options).map(opt => opt.value));
          }
          
          if (sortFilterDesktop) {
            console.log('Desktop current sort value:', sortFilterDesktop.value);
            console.log('Desktop available options:', Array.from(sortFilterDesktop.options).map(opt => opt.value));
          }
          
          const courseCards = document.querySelectorAll('#coursesGrid > div:not(.col-span-full)');
          console.log('Course cards found:', courseCards.length);
          
          if (courseCards.length > 0) {
            console.log('Sample course data:');
            Array.from(courseCards).slice(0, 3).forEach((card, index) => {
              console.log(`Card ${index}:`, {
                title: card.getAttribute('data-title'),
                created: card.getAttribute('data-created'),
                price: card.getAttribute('data-price'),
                students: card.getAttribute('data-students')
              });
            });
          }
        };

        // Course detail modal functions
        function openCourseDetail(courseId) {
          // Find the course data from the server-side rendered courses
          const courseCard = document.querySelector(`[onclick="openCourseDetail('${courseId}')"]`).closest('.bg-white.rounded-2xl');
          
          if (courseCard) {
            // Extract course data from the card
            const title = courseCard.querySelector('h3').textContent;
            const description = courseCard.querySelector('p').textContent;
            const category = courseCard.querySelector('.space-y-2 .flex:first-child span:first-child').textContent;
            const price = courseCard.querySelector('.space-y-2 .flex:first-child span:last-child').textContent;
            const difficulty = courseCard.querySelector('.space-y-2 .flex:last-child span:first-child').textContent;
            const students = courseCard.querySelector('.space-y-2 .flex:last-child span:last-child').textContent;
            const status = courseCard.querySelector('.px-2.py-1.text-xs.rounded-full').textContent;
            
            // Populate modal with course data
            document.getElementById('modalCourseTitle').textContent = title;
            document.getElementById('modalCourseDescription').textContent = description;
            document.getElementById('modalCourseCategory').textContent = category;
            document.getElementById('modalCoursePrice').textContent = price;
            document.getElementById('modalCourseDifficulty').textContent = difficulty;
            document.getElementById('modalCourseStatus').textContent = status;
            
            // Update enrolled students count
            const studentCount = students.replace(' students', '');
            document.getElementById('modalEnrolledStudents').textContent = studentCount;
            
            // Store course ID for edit/delete operations
            document.getElementById('courseDetailModal').setAttribute('data-course-id', courseId);
            
            // Show modal
            document.getElementById('courseDetailModal').classList.remove('hidden');
            document.body.style.overflow = 'hidden';
          } else {
            alert('Course not found');
          }
        }

       function closeCourseDetail() {
         document.getElementById("courseDetailModal").classList.add("hidden");
         document.body.style.overflow = "auto";
       }

       // Course management functions
       function editCourse(courseId) {
         // If courseId is not provided, get it from the modal
         if (!courseId) {
           courseId = document.getElementById('courseDetailModal').getAttribute('data-course-id');
         }
         window.location.href = `/instructor/courses/${courseId}/edit`;
       }

       function duplicateCourse() {
         alert("Course duplicated successfully! You can now edit the copy.");
         closeCourseDetail();
       }

       function deleteCourse(courseId, courseTitle) {
         // If courseId is not provided, get it from the modal
         if (!courseId) {
           courseId = document.getElementById('courseDetailModal').getAttribute('data-course-id');
           courseTitle = document.getElementById('modalCourseTitle').textContent;
         }
         
         if (confirm(`Are you sure you want to delete the course "${courseTitle}"? This action cannot be undone.`)) {
           fetch(`/instructor/courses/${courseId}`, {
             method: 'DELETE',
             headers: {
               'Content-Type': 'application/json'
             }
           })
           .then(response => response.json())
           .then(data => {
             if (data.success) {
               alert('Course deleted successfully!');
               // Reload the page to refresh the course list
               window.location.reload();
             } else {
               alert('Error deleting course: ' + data.message);
             }
           })
           .catch(error => {
             console.error('Error deleting course:', error);
             alert('Error deleting course. Please try again.');
           });
         }
       }

       // Close modals when clicking outside
       document
         .getElementById("courseDetailModal")
         .addEventListener("click", function (e) {
           if (e.target === this) {
             closeCourseDetail();
           }
         });

     </script>
